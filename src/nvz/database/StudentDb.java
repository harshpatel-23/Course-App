package nvz.database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.mysql.jdbc.Statement;

import nvz.domain.Name;
import nvz.domain.Student;


/* Methods to perform operations on the student database */
public class StudentDb {
	private static DataSource studentDbDataSource=null;
	
	public static DataSource initDataSource() throws NamingException {
    	Context initContext;
    	
    	/* The datasource needs to be configured in Tomcat since this is a web application.  We will just
    	 * look it up here.   Please talk to the instructor or TA if you are not sure how to configure Tomcat.
    	 * NamingException is thrown if there is a failure looking up the data source.  We can't handle it here.
    	 *  
    	 */
		try {
			initContext = new InitialContext();
			Context envContext  = (Context)initContext.lookup("java:/comp/env");
	    	DataSource dataSource = (DataSource)envContext.lookup("jdbc/zuniversitydb");
	    	return dataSource;
		} finally {
		}
    }
	
    public static Connection getConnection() throws NamingException, SQLException {
    	Connection dbConn;
    	
    	if (studentDbDataSource==null) {
    		studentDbDataSource = initDataSource();
    	}
    	
    	dbConn = studentDbDataSource.getConnection();
    	return dbConn;
    }
    
    public static long getGeneratedPrimaryKey(PreparedStatement sqlStmt) throws SQLException {
    	long id=-1;
    	
    	try (ResultSet generatedKeys = sqlStmt.getGeneratedKeys()) {
    		if (generatedKeys.next()) {
                id = generatedKeys.getLong(1);
            }
    	}
    	
    	return id;
    }
    
    public static Student insertNewStudentWithConn(Student newStudent, Connection dbConn) throws SQLException, NamingException {
    	String insertStmt = "INSERT INTO student (firstname, lastname) VALUES (?,?)";
    	long studId;
    	Name studName;

    	try (PreparedStatement sqlStmt = dbConn.prepareStatement(insertStmt, Statement.RETURN_GENERATED_KEYS)) {
    		studName = newStudent.getName();
    		sqlStmt.setString(1, studName.getFirstName());
    		sqlStmt.setString(2, studName.getLastName());
    		sqlStmt.executeUpdate();
    		/* Add the id that was generated by the database */
    		studId = getGeneratedPrimaryKey(sqlStmt);
    		newStudent.setId(studId);
    	} 
    	
    	return null;
    }
    
    /* Call this method if we are not currently using a connection (so we need to obtain a connection) */
    /* The method: 1) obtains a connection, 2) starts a transaction, 3) performs the database work, 4) commits or rolls back the transaction,
     * 5) releases the connection
     */
    public static Student insertNewStudent(Student newStudent) throws SQLException, NamingException {
      
    	try (Connection dbConn = getConnection()) {
    		// Turn off auto-commit so we can use transactions
            dbConn.setAutoCommit(false);
            
            /* We are now operating under a transaction, rollback on an exception or commit on successful completion */
            try {
            	insertNewStudentWithConn(newStudent, dbConn);
            	dbConn.commit();   /* End of transaction.  Since it was successful, commit it. */
            } catch (Exception ex) {
            	dbConn.rollback();
            	throw ex;  /* rethrow the exception so the caller function can recover from this failure */
            } 
    	} 
    	
    	return newStudent;
    }
    
}

